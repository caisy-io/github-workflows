on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string

name: monorepo workflow for caisy

env:
  CI_PROJECT_NAME: ${{ inputs.service }}

jobs:
  googleandgeneric:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: target checkout
        if: github.event.client_payload.environment
        with:
          ref: ${{ github.event.client_payload.environment }}
      - uses: actions/checkout@v2
        name: normal checkout
        if: ${{ !github.event.client_payload.environment }}
      - name: Set environment for branch
        env:
          DEV_EMAIL_ZEPTO_API_KEY: ${{ secrets.DEV_EMAIL_ZEPTO_API_KEY }}
          STAGING_EMAIL_ZEPTO_API_KEY: ${{ secrets.STAGING_EMAIL_ZEPTO_API_KEY }}
          PROD_EMAIL_ZEPTO_API_KEY: ${{ secrets.PROD_EMAIL_ZEPTO_API_KEY }}
          GRAFC_PROM_PWD_DEV: ${{ secrets.GRAFC_PROM_PWD_DEV }}
          GRAFC_LOGS_USER_DEV: ${{ secrets.GRAFC_LOGS_USER_DEV }}
          GRAFC_LOGS_PWD_DEV: ${{ secrets.GRAFC_LOGS_PWD_DEV }}
          GRAFC_TRACE_USER_DEV: ${{ secrets.GRAFC_TRACE_USER_DEV }}
          GRAFC_TRACE_PWD_DEV: ${{ secrets.GRAFC_TRACE_PWD_DEV }}
          GRAFC_PROM_PWD_STAGING: ${{ secrets.GRAFC_PROM_PWD_STAGING }}
          GRAFC_LOGS_USER_STAGING: ${{ secrets.GRAFC_LOGS_USER_STAGING }}
          GRAFC_LOGS_PWD_STAGING: ${{ secrets.GRAFC_LOGS_PWD_STAGING }}
          GRAFC_PROM_USER_STAGING: ${{ secrets.GRAFC_PROM_USER_STAGING }}
          GRAFC_TRACE_USER_STAGING: ${{ secrets.GRAFC_TRACE_USER_STAGING }}
          GRAFC_TRACE_PWD_STAGING: ${{ secrets.GRAFC_TRACE_PWD_STAGING }}
          GRAFC_PROM_USER_PROD: ${{ secrets.GRAFC_PROM_USER_PROD }}
          GRAFC_PROM_PWD_PROD: ${{ secrets.GRAFC_PROM_PWD_PROD }}
          GRAFC_LOGS_USER_PROD: ${{ secrets.GRAFC_LOGS_USER_PROD }}
          GRAFC_LOGS_PWD_PROD: ${{ secrets.GRAFC_LOGS_PWD_PROD }}
          GRAFC_TRACE_USER_PROD: ${{ secrets.GRAFC_TRACE_USER_PROD }}
          GRAFC_TRACE_PWD_PROD: ${{ secrets.GRAFC_TRACE_PWD_PROD }}
          DEV_STORAGE_BUCKET_CONFIG: ${{ secrets.DEV_STORAGE_BUCKET_CONFIG }}
          STAGING_STORAGE_BUCKET_CONFIG: ${{ secrets.STAGING_STORAGE_BUCKET_CONFIG }}
          PROD_STORAGE_BUCKET_CONFIG: ${{ secrets.PROD_STORAGE_BUCKET_CONFIG }}
          LUCID_MODE_DEVTWO: ${{ secrets.LUCID_MODE_DEVTWO }}
          DATABASE_URL_DEV: ${{ secrets.OVH_DATABASE_URL_DEV }}
          DATABASE_URL_STAGING: ${{ secrets.OVH_DATABASE_URL_STAGING }}
          DATABASE_URL_PROD: ${{ secrets.OVH_DATABASE_URL_PROD }}
          GOOGLE_APPLICATION_CREDENTIALS_DEV: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_DEV }}
          GOOGLE_APPLICATION_CREDENTIALS_STAGING: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_STAGING }}
          GOOGLE_APPLICATION_CREDENTIALS_PROD: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_PROD }}
          X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_PROD: ${{ secrets.X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_PROD }}
          X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_DEV: ${{ secrets.X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_DEV }}
          X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_STAGING: ${{ secrets.X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_STAGING }}
          NEXT_PUBLIC_FIRE_APIKEY_DEV: ${{ secrets.NEXT_PUBLIC_FIRE_APIKEY_DEV }}
          NEXT_PUBLIC_FIRE_APIKEY_STAGING: ${{ secrets.NEXT_PUBLIC_FIRE_APIKEY_STAGING }}
          NEXT_PUBLIC_FIRE_APIKEY_PROD: ${{ secrets.NEXT_PUBLIC_FIRE_APIKEY_PROD }}
          NEXT_PUBLIC_FIRE_AUTHDOMAIN_DEV: ${{ secrets.NEXT_PUBLIC_FIRE_AUTHDOMAIN_DEV }}
          NEXT_PUBLIC_FIRE_AUTHDOMAIN_STAGING: ${{ secrets.NEXT_PUBLIC_FIRE_AUTHDOMAIN_STAGING }}
          NEXT_PUBLIC_FIRE_AUTHDOMAIN_PROD: ${{ secrets.NEXT_PUBLIC_FIRE_AUTHDOMAIN_PROD }}
          BILLING_STRIPE_KEY_DEV: ${{ secrets.BILLING_STRIPE_KEY_DEV }}
          BILLING_STRIPE_WEBHOOK_SECRET_DEV: ${{ secrets.BILLING_STRIPE_WEBHOOK_SECRET_DEV }}
          BILLING_STRIPE_RETURN_BASE_URL_DEV: ${{ secrets.BILLING_STRIPE_RETURN_BASE_URL_DEV }}
          BILLING_STRIPE_KEY_STAGING: ${{ secrets.BILLING_STRIPE_KEY_STAGING }}
          BILLING_STRIPE_WEBHOOK_SECRET_STAGING: ${{ secrets.BILLING_STRIPE_WEBHOOK_SECRET_STAGING }}
          BILLING_STRIPE_RETURN_BASE_URL_STAGING: ${{ secrets.BILLING_STRIPE_RETURN_BASE_URL_STAGING }}
          BILLING_STRIPE_KEY_PROD: ${{ secrets.BILLING_STRIPE_KEY_PROD }}
          BILLING_STRIPE_WEBHOOK_SECRET_PROD: ${{ secrets.BILLING_STRIPE_WEBHOOK_SECRET_PROD }}
          BILLING_STRIPE_RETURN_BASE_URL_PROD: ${{ secrets.BILLING_STRIPE_RETURN_BASE_URL_PROD }}
          DEVTHREE_DATABASE_URL: ${{ secrets.DEVTHREE_DATABASE_URL }}
          INPUT_ENV: ${{ github.event.client_payload.environment }}
        run: |
          echo "TARGET_PLATFORM=GCLOUD" >> "$GITHUB_ENV"
          if test -f "build.sh"; then
              echo "build.sh exists."
              echo "HAS_BUILD_SCRIPT=Y" >> "$GITHUB_ENV"
          fi
          if test -f "deploy.sh"; then
              echo "deploy.sh exists."
              echo "HAS_DEPLOY_SCRIPT=Y" >> "$GITHUB_ENV"
          fi
          echo "input env: $INPUT_ENV"
          echo "input env: $INPUT_ENV"
          if [[ $GITHUB_REF == 'refs/heads/prod' || $INPUT_ENV == "prod" ]]; then
              echo "using prod environment"
              echo "CI_COMMIT_REF_SLUG=prod" >> "$GITHUB_ENV"
              echo "CENV=prod" >> "$GITHUB_ENV"
              echo "DATABASE_URL=$DATABASE_URL_PROD" >> "$GITHUB_ENV"
              echo "STORAGE_BUCKET_CONFIG=$PROD_STORAGE_BUCKET_CONFIG" >> "$GITHUB_ENV"
              echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_PROD" >> "$GITHUB_ENV"
              echo "X_GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_PROD" >> "$GITHUB_ENV"
              echo "X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH=$X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_PROD" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_APIKEY=$NEXT_PUBLIC_FIRE_APIKEY_PROD" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_AUTHDOMAIN=$NEXT_PUBLIC_FIRE_AUTHDOMAIN_PROD" >> "$GITHUB_ENV"
              echo "BUCKET_NAME=caisy-assets-prod" >> "$GITHUB_ENV"
              echo "ASSETS_BASE_PATH=https://assets.caisy.io/assets" >> "$GITHUB_ENV"
              echo "ASSET_SERVE_URL=https://assets.caisy.io" >> "$GITHUB_ENV"
              echo "CORE_URL=https://caisy.io" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_USER=$GRAFC_PROM_USER_PROD" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_PWD=$GRAFC_PROM_PWD_PROD" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_USER=$GRAFC_LOGS_USER_PROD" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_PWD=$GRAFC_LOGS_PWD_PROD" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_USER=$GRAFC_TRACE_USER_PROD" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_PWD=$GRAFC_TRACE_PWD_PROD" >> "$GITHUB_ENV"
              echo "EMAIL_ZEPTO_API_KEY=$PROD_EMAIL_ZEPTO_API_KEY" >> "$GITHUB_ENV"
              echo "IMAGE_PREFIX=gcr.io/caisy-io/${{ env.CI_PROJECT_NAME }}" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_KEY=$BILLING_STRIPE_KEY_PROD" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_WEBHOOK_SECRET=$BILLING_STRIPE_WEBHOOK_SECRET_PROD" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_RETURN_BASE_URL=$BILLING_STRIPE_RETURN_BASE_URL_PROD" >> "$GITHUB_ENV"
          elif [[ $GITHUB_REF == 'refs/heads/staging' || $INPUT_ENV == "staging" ]]; then
              echo "using staging environment"
              echo "CI_COMMIT_REF_SLUG=staging" >> "$GITHUB_ENV"
              echo "CENV=staging" >> "$GITHUB_ENV"
              echo "DATABASE_URL=$DATABASE_URL_STAGING" >> "$GITHUB_ENV"
              echo "STORAGE_BUCKET_CONFIG=$STAGING_STORAGE_BUCKET_CONFIG" >> "$GITHUB_ENV"
              echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_STAGING" >> "$GITHUB_ENV"
              echo "X_GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_STAGING" >> "$GITHUB_ENV"
              echo "X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH=$X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_STAGING" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_APIKEY=$NEXT_PUBLIC_FIRE_APIKEY_STAGING" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_AUTHDOMAIN=$NEXT_PUBLIC_FIRE_AUTHDOMAIN_STAGING" >> "$GITHUB_ENV"
              echo "BUCKET_NAME=caisy-assets-staging" >> "$GITHUB_ENV"
              echo "ASSETS_BASE_PATH=https://assets.staging.caisy.io/assets" >> "$GITHUB_ENV"
              echo "ASSET_SERVE_URL=https://assets.staging.caisy.io" >> "$GITHUB_ENV"
              echo "CORE_URL=https://staging.caisy.io" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_USER=$GRAFC_PROM_USER_STAGING" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_PWD=$GRAFC_PROM_PWD_STAGING" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_USER=$GRAFC_LOGS_USER_STAGING" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_PWD=$GRAFC_LOGS_PWD_STAGING" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_USER=$GRAFC_TRACE_USER_STAGING" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_PWD=$GRAFC_TRACE_PWD_STAGING" >> "$GITHUB_ENV"
              echo "EMAIL_ZEPTO_API_KEY=$STAGING_EMAIL_ZEPTO_API_KEY" >> "$GITHUB_ENV"
              echo "IMAGE_PREFIX=gcr.io/caisy-staging/${{ env.CI_PROJECT_NAME }}" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_KEY=$BILLING_STRIPE_KEY_STAGING" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_WEBHOOK_SECRET=$BILLING_STRIPE_WEBHOOK_SECRET_STAGING" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_RETURN_BASE_URL=$BILLING_STRIPE_RETURN_BASE_URL_STAGING" >> "$GITHUB_ENV"
          elif [[ $GITHUB_REF == 'refs/heads/dev' || $INPUT_ENV == "dev" ]]; then
              echo "using dev environment"
              echo "CI_COMMIT_REF_SLUG=dev" >> "$GITHUB_ENV"
              echo "CENV=dev" >> "$GITHUB_ENV"
              echo "EMAIL_ZEPTO_API_KEY=$DEV_EMAIL_ZEPTO_API_KEY" >> "$GITHUB_ENV"
              echo "DATABASE_URL=$DATABASE_URL_DEV" >> "$GITHUB_ENV"
              echo "STORAGE_BUCKET_CONFIG=$DEV_STORAGE_BUCKET_CONFIG" >> "$GITHUB_ENV"
              echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_DEV" >> "$GITHUB_ENV"
              echo "X_GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_DEV" >> "$GITHUB_ENV"
              echo "X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH=$X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_DEV" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_APIKEY=$NEXT_PUBLIC_FIRE_APIKEY_DEV" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_AUTHDOMAIN=$NEXT_PUBLIC_FIRE_AUTHDOMAIN_DEV" >> "$GITHUB_ENV"
              echo "BUCKET_NAME=caisy-assets-dev" >> "$GITHUB_ENV"
              echo "ASSET_SERVE_URL=https://assets.dev.caisy.io" >> "$GITHUB_ENV"
              echo "ASSETS_BASE_PATH=https://assets.dev.caisy.io/assets" >> "$GITHUB_ENV"
              echo "CORE_URL=https://dev.caisy.io" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_USER=$GRAFC_PROM_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_PWD=$GRAFC_PROM_PWD_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_USER=$GRAFC_LOGS_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_PWD=$GRAFC_LOGS_PWD_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_USER=$GRAFC_TRACE_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_PWD=$GRAFC_TRACE_PWD_DEV" >> "$GITHUB_ENV"
              echo "IMAGE_PREFIX=gcr.io/caisy-dev/${{ env.CI_PROJECT_NAME }}" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_KEY=$BILLING_STRIPE_KEY_DEV" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_WEBHOOK_SECRET=$BILLING_STRIPE_WEBHOOK_SECRET_DEV" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_RETURN_BASE_URL=$BILLING_STRIPE_RETURN_BASE_URL_DEV" >> "$GITHUB_ENV"
          elif [[ $GITHUB_REF == 'refs/heads/devthree' || $INPUT_ENV == "devthree" ]]; then
              echo "using dev environment"
              echo "CI_COMMIT_REF_SLUG=dev" >> "$GITHUB_ENV"
              echo "CENV=devthree" >> "$GITHUB_ENV"
              echo "EMAIL_ZEPTO_API_KEY=$DEV_EMAIL_ZEPTO_API_KEY" >> "$GITHUB_ENV"
              echo "DATABASE_URL=$DEVTHREE_DATABASE_URL" >> "$GITHUB_ENV"
              echo "STORAGE_BUCKET_CONFIG=$DEV_STORAGE_BUCKET_CONFIG" >> "$GITHUB_ENV"
              echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_DEV" >> "$GITHUB_ENV"
              echo "X_GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_DEV" >> "$GITHUB_ENV"
              echo "X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH=$X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_DEV" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_APIKEY=$NEXT_PUBLIC_FIRE_APIKEY_DEV" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_AUTHDOMAIN=$NEXT_PUBLIC_FIRE_AUTHDOMAIN_DEV" >> "$GITHUB_ENV"
              echo "BUCKET_NAME=caisy-assets-dev" >> "$GITHUB_ENV"
              echo "ASSET_SERVE_URL=https://assets.devthree.caisy.io" >> "$GITHUB_ENV"
              echo "ASSETS_BASE_PATH=https://assets.devthree.caisy.io/assets" >> "$GITHUB_ENV"
              echo "CORE_URL=https://devthree.caisy.io" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_USER=$GRAFC_PROM_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_PWD=$GRAFC_PROM_PWD_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_USER=$GRAFC_LOGS_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_PWD=$GRAFC_LOGS_PWD_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_USER=$GRAFC_TRACE_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_PWD=$GRAFC_TRACE_PWD_DEV" >> "$GITHUB_ENV"
              echo "IMAGE_PREFIX=gcr.io/caisy-dev/${{ env.CI_PROJECT_NAME }}" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_KEY=$BILLING_STRIPE_KEY_DEV" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_WEBHOOK_SECRET=$BILLING_STRIPE_WEBHOOK_SECRET_DEV" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_RETURN_BASE_URL=$BILLING_STRIPE_RETURN_BASE_URL_DEV" >> "$GITHUB_ENV"
          elif [[ $GITHUB_REF == 'refs/heads/devtwo' || $INPUT_ENV == "devtwo" ]]; then
              echo "using devtwo environment"
              echo "CI_COMMIT_REF_SLUG=dev" >> "$GITHUB_ENV"
              echo "CENV=devtwo" >> "$GITHUB_ENV"
              echo "EMAIL_ZEPTO_API_KEY=$DEV_EMAIL_ZEPTO_API_KEY" >> "$GITHUB_ENV"
              echo "DATABASE_URL=$DATABASE_URL_DEVTWO" >> "$GITHUB_ENV"
              echo "STORAGE_BUCKET_CONFIG=$DEV_STORAGE_BUCKET_CONFIG" >> "$GITHUB_ENV"
              echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_DEV" >> "$GITHUB_ENV"
              echo "X_GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_DEV" >> "$GITHUB_ENV"
              echo "X_GOOGLE_APPLICATION_CREDENTIALS_AUTH=$GOOGLE_APPLICATION_CREDENTIALS_PROD" >> "$GITHUB_ENV"
              echo "X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH=$X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH_PROD" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_APIKEY=$NEXT_PUBLIC_FIRE_APIKEY_PROD" >> "$GITHUB_ENV"
              echo "NEXT_PUBLIC_FIRE_AUTHDOMAIN=$NEXT_PUBLIC_FIRE_AUTHDOMAIN_PROD" >> "$GITHUB_ENV"
              echo "BUCKET_NAME=caisy-assets-devtwo" >> "$GITHUB_ENV"
              echo "ASSET_SERVE_URL=https://assets.devtwo.caisy.io" >> "$GITHUB_ENV"
              echo "ASSETS_BASE_PATH=https://assets.devtwo.caisy.io/assets" >> "$GITHUB_ENV"
              echo "CORE_URL=https://devtwo.caisy.io" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_USER=$GRAFC_PROM_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_PROM_PWD=$GRAFC_PROM_PWD_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_USER=$GRAFC_LOGS_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_LOGS_PWD=$GRAFC_LOGS_PWD_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_USER=$GRAFC_TRACE_USER_DEV" >> "$GITHUB_ENV"
              echo "GRAFC_TRACE_PWD=$GRAFC_TRACE_PWD_DEV" >> "$GITHUB_ENV"
              echo "IMAGE_PREFIX=gcr.io/caisy-dev/${{ env.CI_PROJECT_NAME }}" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_KEY=$BILLING_STRIPE_KEY_DEV" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_WEBHOOK_SECRET=$BILLING_STRIPE_WEBHOOK_SECRET_DEV" >> "$GITHUB_ENV"
              echo "BILLING_STRIPE_RETURN_BASE_URL=$BILLING_STRIPE_RETURN_BASE_URL_DEV" >> "$GITHUB_ENV"
              echo "LUCID_MODE=$LUCID_MODE_DEVTWO" >> "$GITHUB_ENV"
          else
              echo "branch not target of the deployment: $GITHUB_REF"
          fi

      - id: "auth-dev"
        if: ${{ env.CENV == 'dev' }}
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.gcp_credentials_dev }}"

      - id: "auth-devtwo"
        if: ${{ env.CENV == 'devtwo' }}
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.gcp_credentials_dev }}"

      - id: "auth-devthree"
        if: ${{ env.CENV == 'devthree' }}
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.gcp_credentials_dev }}"

      - id: "auth-staging"
        if: ${{ env.CENV == 'staging' }}
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.gcp_credentials_staging }}"

      - id: "auth-prod"
        if: ${{ env.CENV == 'prod' }}
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.gcp_credentials_prod }}"

      - run: |-
          gcloud --quiet auth configure-docker

      - name: custom_build
        if: ${{ env.HAS_BUILD_SCRIPT == 'Y'}}
        run: |
          bash build.sh
      # Build the Docker image
      - name: Setup Docker Buildx
        id: buildx
        if: ${{ env.HAS_BUILD_SCRIPT != 'Y'}}
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Docker Image
        id: docker_build
        if: ${{ env.HAS_BUILD_SCRIPT != 'Y'}}
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./deployment/docker/${{ inputs.service }}.dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          build-args: |
            NEXT_PUBLIC_FIRE_APIKEY=${{ env.NEXT_PUBLIC_FIRE_APIKEY }}
            NEXT_PUBLIC_FIRE_AUTHDOMAIN=${{ env.NEXT_PUBLIC_FIRE_AUTHDOMAIN }}
            CORE_URL=${{ env.CORE_URL }}
            ASSET_SERVE_URL=${{ env.ASSET_SERVE_URL }}
          tags: |
            ${{ env.IMAGE_PREFIX }}:${{ github.sha }}
            ${{ env.IMAGE_PREFIX }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}:latest
          cache-to: type=inline

      - id: "get-k8s-credentials-dev"
        if: ${{ env.CENV == 'dev'}}
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.DEVTHREE_KUBECONFIG }}          

      - id: "get-k8s-credentials-devthree"
        if: ${{ env.CENV == 'devthree'}}
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.DEVTHREE_KUBECONFIG }}

      - id: "get-k8s-credentials-staging"
        if: ${{ env.CENV == 'staging'}}
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

      - id: "get-k8s-credentials-prod"
        if: ${{ env.CENV == 'prod'}}
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.PROD_KUBECONFIG }}

      - name: Apply kubectl
        if: ${{ env.HAS_DEPLOY_SCRIPT != 'Y'}}
        env:
          EMAIL_ZEPTO_API_KEY: ${{ env.EMAIL_ZEPTO_API_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
          X_GOOGLE_APPLICATION_CREDENTIALS: ${{ env.X_GOOGLE_APPLICATION_CREDENTIALS }}
          X_GOOGLE_APPLICATION_CREDENTIALS_AUTH: ${{ env.X_GOOGLE_APPLICATION_CREDENTIALS_AUTH }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          STORAGE_BUCKET_CONFIG: ${{ env.STORAGE_BUCKET_CONFIG }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          CI_PROJECT_NAME: ${{ env.CI_PROJECT_NAME }}
          NEXT_PUBLIC_FIRE_APIKEY: ${{ env.NEXT_PUBLIC_FIRE_APIKEY }}
          NEXT_PUBLIC_FIRE_AUTHDOMAIN: ${{ env.NEXT_PUBLIC_FIRE_AUTHDOMAIN }}
          ASSETS_BASE_PATH: ${{ env.ASSETS_BASE_PATH }}
          BUCKET_NAME: ${{ env.BUCKET_NAME }}
          CORE_URL: ${{ env.CORE_URL }}
          ASSET_SERVE_URL: ${{ env.ASSET_SERVE_URL }}
          CENV: ${{ env.CENV }}
          BILLING_STRIPE_KEY: ${{ env.BILLING_STRIPE_KEY }}
          BILLING_STRIPE_WEBHOOK_SECRET: ${{ env.BILLING_STRIPE_WEBHOOK_SECRET }}
          BILLING_STRIPE_RETURN_BASE_URL: ${{ env.BILLING_STRIPE_RETURN_BASE_URL }}
          GRAFC_PROM_USER: ${{ env.GRAFC_PROM_USER }}
          GRAFC_PROM_PWD: ${{ env.GRAFC_PROM_PWD }}
          GRAFC_LOGS_USER: ${{ env.GRAFC_LOGS_USER }}
          GRAFC_LOGS_PWD: ${{ env.GRAFC_LOGS_PWD }}
          GRAFC_TRACE_USER: ${{ env.GRAFC_TRACE_USER }}
          GRAFC_TRACE_PWD: ${{ env.GRAFC_TRACE_PWD }}
          TARGET_PLATFORM: ${{ env.TARGET_PLATFORM }}
          LUCID_MODE: ${{ env.LUCID_MODE }}
          ELASTICSEARCH_PWD: ${{ env.ELASTICSEARCH_PWD }}
          ELASTICSEARCH_HOST: ${{ env.ELASTICSEARCH_HOST }}
          X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH: ${{ env.X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH }}
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          INTERNAL_AUTOMATION_AUTH_TOKEN: ${{ secrets.INTERNAL_AUTOMATION_AUTH_TOKEN }}
          IMAGE: ${{ env.IMAGE_PREFIX }}:${{ github.sha }}
        run: |
          mkdir -p /tmp/deployment/k8s/${{ inputs.service }} && for filename in deployment/k8s/${{ inputs.service }}/*; do envsubst '${X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH} ${STORAGE_BUCKET_CONFIG} ${LUCID_MODE} ${X_GOOGLE_APPLICATION_CREDENTIALS} ${X_GOOGLE_APPLICATION_CREDENTIALS_AUTH} ${EMAIL_ZEPTO_API_KEY} ${BILLING_STRIPE_KEY} ${BILLING_STRIPE_WEBHOOK_SECRET} ${BILLING_STRIPE_RETURN_BASE_URL} ${ASSET_SERVE_URL} ${GRAFC_PROM_USER} ${GRAFC_PROM_PWD} ${GRAFC_LOGS_USER} ${GRAFC_LOGS_PWD} ${GRAFC_TRACE_USER} ${GRAFC_TRACE_PWD} ${ELASTICSEARCH_PWD} ${ELASTICSEARCH_HOST} ${IMAGE} ${NEXT_PUBLIC_INTERCOM_ID} ${NEXT_PUBLIC_FIRE_APIKEY} ${NEXT_PUBLIC_FIRE_AUTHDOMAIN} ${CORE_URL} ${ASSETS_BASE_PATH} ${BUCKET_NAME} ${GOOGLE_APPLICATION_CREDENTIALS} ${SENDGRID_API_KEY} ${DATABASE_URL} ${LINEAR_API_KEY} ${INTERNAL_AUTOMATION_AUTH_TOKEN} ${CI_PROJECT_NAME} ${CENV}' <./${filename} > /tmp/base/${filename}; done &&
          if [ -d "deployment/overlays" ]; then 
            cp -rf deployment/overlays /tmp/overlays; 
            echo "Copied overlay files"; 
          fi && 
          ls /tmp/base &&
          if [ -d "/tmp/overlays/${CENV}/${{ inputs.service }}" ]; then 
            echo "Applying Kustomize overlay for ${CENV} environment" && 
            ls /tmp/overlays/${CENV}/${{ inputs.service }} &&
            kubectl apply -k /tmp/overlays/${CENV}/${{ inputs.service }}; 
          else 
            echo "No overlay found for ${{ inputs.service }} environment. Applying base configuration." && 
            for filename in /tmp/base/*; do 
              cat /tmp/base/${filename} && kubectl apply -f /tmp/base/${filename} && echo "Applied file: /tmp/base/${filename}"; 
            done; 
          fi
      - name: Run deploy.sh
        if: ${{ env.HAS_DEPLOY_SCRIPT == 'Y'}}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
          X_GOOGLE_APPLICATION_CREDENTIALS: ${{ env.X_GOOGLE_APPLICATION_CREDENTIALS }}
          X_GOOGLE_APPLICATION_CREDENTIALS_AUTH: ${{ env.X_GOOGLE_APPLICATION_CREDENTIALS_AUTH }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          STORAGE_BUCKET_CONFIG: ${{ env.STORAGE_BUCKET_CONFIG }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          CI_PROJECT_NAME: ${{ env.CI_PROJECT_NAME }}
          NEXT_PUBLIC_FIRE_APIKEY: ${{ env.NEXT_PUBLIC_FIRE_APIKEY }}
          NEXT_PUBLIC_FIRE_AUTHDOMAIN: ${{ env.NEXT_PUBLIC_FIRE_AUTHDOMAIN }}
          ASSETS_BASE_PATH: ${{ env.ASSETS_BASE_PATH }}
          BUCKET_NAME: ${{ env.BUCKET_NAME }}
          CORE_URL: ${{ env.CORE_URL }}
          ASSET_SERVE_URL: ${{ env.ASSET_SERVE_URL }}
          CENV: ${{ env.CENV }}
          BILLING_STRIPE_KEY: ${{ env.BILLING_STRIPE_KEY }}
          BILLING_STRIPE_WEBHOOK_SECRET: ${{ env.BILLING_STRIPE_WEBHOOK_SECRET }}
          BILLING_STRIPE_RETURN_BASE_URL: ${{ env.BILLING_STRIPE_RETURN_BASE_URL }}
          GRAFC_PROM_USER: ${{ env.GRAFC_PROM_USER }}
          GRAFC_PROM_PWD: ${{ env.GRAFC_PROM_PWD }}
          GRAFC_LOGS_USER: ${{ env.GRAFC_LOGS_USER }}
          GRAFC_LOGS_PWD: ${{ env.GRAFC_LOGS_PWD }}
          GRAFC_TRACE_USER: ${{ env.GRAFC_TRACE_USER }}
          GRAFC_TRACE_PWD: ${{ env.GRAFC_TRACE_PWD }}
          TARGET_PLATFORM: ${{ env.TARGET_PLATFORM }}
          ELASTICSEARCH_PWD: ${{ env.ELASTICSEARCH_PWD }}
          ELASTICSEARCH_HOST: ${{ env.ELASTICSEARCH_HOST }}
          X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH: ${{ env.X_B64_GOOGLE_APPLICATION_CREDENTIALS_AUTH }}
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          EMAIL_ZEPTO_API_KEY: ${{ secrets.EMAIL_ZEPTO_API_KEY }}
          INTERNAL_AUTOMATION_AUTH_TOKEN: ${{ secrets.INTERNAL_AUTOMATION_AUTH_TOKEN }}
          IMAGE: ${{ env.IMAGE_PREFIX }}:${{ github.sha }}
        run: |
          bash deploy.sh